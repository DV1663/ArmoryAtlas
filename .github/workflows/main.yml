name: Build and Release

on:
  push:
    branches:
      - main
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

env:
  BINARY_NAME: armory_atlas
  PY_PROJECT_DIR: armory_atlas
  WHEEL_PATH: armory_atlas/dist
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true

permissions:
  contents: write

jobs:
  linux:
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    strategy:
      matrix:
        target: [ x86_64, x86, aarch64, armv7 ]
    steps:
      - uses: actions/checkout@v4
      - name: Install OpenSSL and pkg-config
        run: |
          sudo apt-get update
          sudo apt-get install -y openssl libssl-dev pkg-config python3 python3-dev
      - name: Verify pkg-config installation
        run: pkg-config --version
      # compile rust binary
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v2
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-git-

      - name: Cache cargo build
        uses: actions/cache@v2
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-

      - name: Build binary
        run: cargo build --release

      - name: Rename the binary to include OS
        run: |
          mv target/release/${{ env.BINARY_NAME }} target/release/${{ env.BINARY_NAME }}-${{ matrix.target }}

      - name: Upload the binary for release job
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.BINARY_NAME }}-${{ matrix.target }}
          path: |
            target/release/${{ env.BINARY_NAME }}-${{ matrix.target }}

  linux-wheels:
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    strategy:
      matrix:
        target: [ x86_64, x86, aarch64, armv7 ]
    steps:
      - uses: actions/checkout@v4
      - name: Install OpenSSL and pkg-config
        run: |
          sudo apt-get update
          sudo apt-get install -y openssl libssl-dev pkg-config python3 python3-dev
      - name: Verify pkg-config installation
        run: pkg-config --version
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist -i python3.7 python3.8 python3.9 python3.10 python3.11 python3.12 --zig
          sccache: 'true'
          manylinux: auto
          working-directory: ${{ env.PY_PROJECT_DIR }}
          rust-toolchain: nightly
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.target }}
          path: ${{ env.WHEEL_PATH }}

  windows:
    runs-on: windows-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    strategy:
      matrix:
        target: [ x64, x86 ]
    steps:
      - uses: actions/checkout@v4
      - name: Install OpenSSL
        run: choco install openssl
      # compile rust binary
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v2
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-git-

      - name: Cache cargo build
        uses: actions/cache@v2
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-

      - name: Build binary
        run: cargo build --release

      - name: Rename the binary to include OS
        run: |
          mv target/release/${{ env.BINARY_NAME }}.exe target/release/${{ env.BINARY_NAME }}-${{ matrix.target }}.exe

      - name: Upload the binary for release job
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.BINARY_NAME }}-${{ matrix.target }}
          path: |
            target/release/${{ env.BINARY_NAME }}-${{ matrix.target }}.exe

  windows-wheels:
    runs-on: windows-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    strategy:
      matrix:
        target: [x64, x86]
    steps:
      - uses: actions/checkout@v4
      - name: Install OpenSSL
        run: choco install openssl
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          architecture: ${{ matrix.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          working-directory: ${{ env.PY_PROJECT_DIR }}
          rust-toolchain: nightly
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.target }}
          path: ${{ env.WHEEL_PATH }}

  macos:
    runs-on: macos-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    strategy:
      matrix:
        target: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v4
      - name: Install OpenSSL
        run: brew install openssl
      # compile rust binary
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v2
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-git-

      - name: Cache cargo build
        uses: actions/cache@v2
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-

      - name: Build binary
        run: cargo build --release
      - name: Rename the binary to include OS
        run: |
          mv target/release/${{ env.BINARY_NAME }} target/release/${{ env.BINARY_NAME }}-${{ matrix.target }}
      - name: Upload the binary for release job
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.BINARY_NAME }}-${{ matrix.target }}
          path: |
            target/release/${{ env.BINARY_NAME }}-${{ matrix.target }}

  macos-wheels:
    runs-on: macos-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    strategy:
      matrix:
        target: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v4
      - name: Install OpenSSL
        run: brew install openssl
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          working-directory: ${{ env.PY_PROJECT_DIR }}
          rust-toolchain: nightly
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.target }}
          path: ${{ env.WHEEL_PATH }}

  macos-m1:
    runs-on: macos-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    strategy:
      matrix:
        target: [ x86_64, aarch64 ]
    steps:
      - uses: actions/checkout@v4
      - name: Install OpenSSL
        run: brew install openssl
      # compile rust binary
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v2
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-git-

      - name: Cache cargo build
        uses: actions/cache@v2
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-

      - name: Build binary
        run: cargo build --release
      - name: Rename the binary to include OS
        run: |
          mv target/release/${{ env.BINARY_NAME }} target/release/${{ env.BINARY_NAME }}-${{ matrix.target }}
      - name: Upload the binary for release job
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.BINARY_NAME }}-${{ matrix.target }}
          path: |
            target/release/${{ env.BINARY_NAME }}-${{ matrix.target }}

  macos-m1-wheels:
    runs-on: macos-14
    if: "startsWith(github.ref, 'refs/tags/')"
    strategy:
      matrix:
        target: [aarch64-apple-darwin]
    steps:
      - uses: actions/checkout@v4
      - name: Install OpenSSL
        run: brew install openssl
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          working-directory: ${{ env.PY_PROJECT_DIR }}
          rust-toolchain: nightly
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.target }}
          path: ${{ env.WHEEL_PATH }}

  sdist:
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    steps:
      - uses: actions/checkout@v4
      - name: Install OpenSSL
        run: sudo apt-get update && sudo apt-get install -y openssl libssl-dev pkg-config
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
          working-directory: ${{ env.PY_PROJECT_DIR }}
          rust-toolchain: nightly
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: ${{ env.WHEEL_PATH }}

  release:
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [ linux, windows, macos, macos-m1, macos-m1-wheels, linux-wheels, windows-wheels, macos-wheels, sdist ]
    steps:
      - name: Download wheels artifacts
        uses: actions/download-artifact@v4
        with:
          name: wheels-linux-x86_64, wheels-linux-x86, wheels-linux-aarch64, wheels-linux-armv7, wheels-windows-x64, wheels-windows-x86, wheels-macos-x86_64, wheels-macos-aarch64, wheels-macos-aarch64-apple-darwin, wheels-sdist
          path: ${{ env.PY_PROJECT_DIR }}/dist
      - name: Download binary artifacts
        uses: actions/download-artifact@v2
        with:
          name: armory_atlas-x86_64, armory_atlas-x86, armory_atlas-aarch64, armory_atlas-armv7, armory_atlas-x64, armory_atlas-x86, armory_atlas-x86_64, armory_atlas-aarch64, armory_atlas-aarch64-apple-darwin
          path: binaries/
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Wheel Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.PY_PROJECT_DIR }}/dist
          asset_name: wheels
          asset_content_type: application/zip
      - name: Upload Binary Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: binaries/
          asset_name: binaries
          asset_content_type: application/octet-stream
